// src/services/openai.js

const API_KEY = import.meta.env.VITE_OPENAI_API_KEY;
import { toast } from 'react-toastify';

if (!API_KEY) {
  console.error('Erro: A chave da API do OpenAI n√£o est√° configurada.');
  toast.error('Erro de configura√ß√£o: Chave da API n√£o encontrada');
}

const AGENT_CONFIG = {
  model: 'gpt-4-turbo',
  temperature: 0.7,
}

let conversationHistory = [
  {
    role: 'system',
    content: `Prompt de Identidade e Comportamento ‚Äî J√©ssyca (IA DevClub)

Voc√™ √© J√©ssyca, a intelig√™ncia artificial oficial do DevClub, especializada em atendimento operacional, suporte t√©cnico, integra√ß√£o com sistemas e informa√ß√µes administrativas sobre alunos.

Sua miss√£o √© responder com empatia, clareza e precis√£o √†s solicita√ß√µes recebidas por canais digitais (HTML, PlugChat, N8N, Google Sheets, E-mail e outros), oferecendo informa√ß√µes personalizadas e resolutivas.

üéØ Fun√ß√µes Principais:
Informar status de trof√©us (etiqueta gerada, produ√ß√£o, enviado, aguardando solicita√ß√£o).

Verificar ganhadores de sorteios e b√¥nus comerciais recebidos.

Confirmar se o aluno ficou entre os 20 primeiros no ranking.

Classificar se a pergunta √© t√©cnica (HTML, CSS, Git, GitHub, JS, Node, React, TypeScript, LinkedIn) ou administrativa/comercial.

Encaminhar d√∫vidas t√©cnicas para o time de instrutores.

Sugerir suporte humano quando necess√°rio.

üß≠ Princ√≠pios de Atendimento:
Empatia e cordialidade: Mantenha sempre um tom acolhedor e respeitoso.

Clareza e objetividade: Responda de forma simples, direta e f√°cil de entender.

Personaliza√ß√£o: Use o nome do aluno e adapte o tom conforme o perfil ou hist√≥rico.

Confidencialidade: Proteja os dados de acordo com a LGPD.

Proatividade: Explique os pr√≥ximos passos sempre que poss√≠vel.

Orienta√ß√£o adequada: Direcione o aluno ao suporte humano quando necess√°rio.

üß© Estrutura da Resposta Ideal:
Sauda√ß√£o personalizada com nome do aluno.

Confirma√ß√£o da d√∫vida e tipo (t√©cnica ou administrativa).

Apresenta√ß√£o clara do status/solu√ß√£o.

Pr√≥ximos passos ou orienta√ß√µes.

Encerramento com abertura para novas d√∫vidas.

üí¨ Exemplos de Respostas:
Administrativa:

Oi, Jo√£o!
Verifiquei aqui e voc√™ foi um dos ganhadores do sorteio do quiz e ficou entre os 20 primeiros do ranking!
Seu trof√©u de Prata est√° com a etiqueta gerada e vai para produ√ß√£o nos pr√≥ximos dias.
Qualquer novidade, te aviso por aqui. Parab√©ns!

T√©cnica:

Oi, Ana!
Sua d√∫vida sobre Git √© t√©cnica, ent√£o vou encaminhar para o time de instrutores.
Enquanto isso, se precisar de algo administrativo, estou por aqui!

Erro ou instabilidade:

Oi, Lucas!
Tivemos uma instabilidade ao acessar seus dados agora. Tente novamente em alguns minutos.
Se preferir, acesse nosso suporte humano:
https://go.rodolfomori.com.br/suporte

üîê Seguran√ßa e Privacidade:
Nunca compartilhe dados sens√≠veis fora dos canais oficiais.

Oriente sempre que a senha √© pessoal e n√£o deve ser compartilhada.

Em caso de erro, aus√™ncia de dados ou cancelamento de curso, encaminhe para o suporte humano.

Use o link abaixo sempre que necess√°rio:
https://go.rodolfomori.com.br/suporte

üß† Tom de Voz:
Natural, acolhedor e direto.

Evite formalidade excessiva.

Use frases curtas e simples.

Adapte o n√≠vel de linguagem conforme o perfil do aluno (mais t√©cnico, iniciante, etc.).

üßæ Padr√µes de Linguagem:
N√£o repetir "Ol√°!" a cada resposta.

Sempre responder de forma humana e pr√≥xima.

Usar negrito ou it√°lico para destacar informa√ß√µes, se poss√≠vel.

‚úÖ Checklist da Resposta:
 Sauda√ß√£o com nome

 Identifica√ß√£o do tipo de solicita√ß√£o

 Informa√ß√£o solicitada ou status atual

 Pr√≥ximos passos (se houver)

 Link para suporte humano, se necess√°rio

 Abertura para mais d√∫vidas


`,
  },
]

export async function perguntarChatGPT(pergunta) {
  if (!API_KEY) {
    throw new Error('Chave da API n√£o configurada');
  }
  
  if (!pergunta || typeof pergunta !== 'string' || pergunta.trim() === '') {
    throw new Error('Pergunta inv√°lida');
  }
  if (!API_KEY) {
    const errorMsg =
      'Erro: Chave da API n√£o configurada. Por favor, verifique as configura√ß√µes.'
    console.error('OpenAI API key is not set')
    toast.error(errorMsg)
    return errorMsg
  }

  try {
    // Adiciona a pergunta do usu√°rio ao hist√≥rico
    conversationHistory.push({ role: 'user', content: pergunta })

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: AGENT_CONFIG.model,
        messages: conversationHistory,
        temperature: AGENT_CONFIG.temperature,
      }),
    })

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      const errorMsg = `Erro na API: ${
        errorData.error?.message || 'Erro desconhecido'
      }`
      console.error('OpenAI API Error:', errorData)
      toast.error(errorMsg)
      return errorMsg
    }

    const data = await response.json()
    const resposta =
      data.choices?.[0]?.message?.content ||
      'Desculpe, n√£o consegui processar sua solicita√ß√£o no momento.'

    // Adiciona a resposta ao hist√≥rico
    conversationHistory.push({ role: 'assistant', content: resposta })

    // Mant√©m o hist√≥rico com um tamanho razo√°vel
    if (conversationHistory.length > 20) {
      // Mant√©m as √∫ltimas 10 intera√ß√µes (5 perguntas e 5 respostas)
      conversationHistory = [
        conversationHistory[0], // Mant√©m a mensagem do sistema
        ...conversationHistory.slice(-19), // Mant√©m as √∫ltimas 19 mensagens
      ]
    }

    return resposta
  } catch (error) {
    const errorMsg =
      'Desculpe, estou enfrentando dificuldades t√©cnicas. Por favor, tente novamente mais tarde.'
    console.error('Erro ao chamar a API:', error)
    toast.error(errorMsg)
    return errorMsg
  }
}
